<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xrj.mapper.BizCourseEnrollMapper">
  <resultMap id="BaseResultMap" type="com.xrj.bean.BizCourseEnroll">
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="course_open_id" jdbcType="VARCHAR" property="courseOpenId" />
    <result column="student_id" jdbcType="VARCHAR" property="studentId" />
    <result column="student_name" jdbcType="VARCHAR" property="studentName" />
    <result column="self_enroll" jdbcType="VARCHAR" property="selfEnroll" />
    <result column="audit_status" jdbcType="VARCHAR" property="auditStatus" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="edit_time" jdbcType="TIMESTAMP" property="editTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, course_open_id, student_id, student_name, self_enroll, audit_status, create_time, 
    edit_time
  </sql>
  <select id="selectByExample" parameterType="com.xrj.bean.BizCourseEnrollExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from biz_course_enroll
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from biz_course_enroll
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from biz_course_enroll
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.xrj.bean.BizCourseEnrollExample">
    delete from biz_course_enroll
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xrj.bean.BizCourseEnroll">
    insert into biz_course_enroll (ID, course_open_id, student_id, 
      student_name, self_enroll, audit_status, 
      create_time, edit_time)
    values (#{id,jdbcType=VARCHAR}, #{courseOpenId,jdbcType=VARCHAR}, #{studentId,jdbcType=VARCHAR}, 
      #{studentName,jdbcType=VARCHAR}, #{selfEnroll,jdbcType=VARCHAR}, #{auditStatus,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{editTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.xrj.bean.BizCourseEnroll">
    insert into biz_course_enroll
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="courseOpenId != null">
        course_open_id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
      <if test="studentName != null">
        student_name,
      </if>
      <if test="selfEnroll != null">
        self_enroll,
      </if>
      <if test="auditStatus != null">
        audit_status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="editTime != null">
        edit_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="courseOpenId != null">
        #{courseOpenId,jdbcType=VARCHAR},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null">
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="selfEnroll != null">
        #{selfEnroll,jdbcType=VARCHAR},
      </if>
      <if test="auditStatus != null">
        #{auditStatus,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="editTime != null">
        #{editTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xrj.bean.BizCourseEnrollExample" resultType="java.lang.Long">
    select count(*) from biz_course_enroll
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update biz_course_enroll
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.courseOpenId != null">
        course_open_id = #{record.courseOpenId,jdbcType=VARCHAR},
      </if>
      <if test="record.studentId != null">
        student_id = #{record.studentId,jdbcType=VARCHAR},
      </if>
      <if test="record.studentName != null">
        student_name = #{record.studentName,jdbcType=VARCHAR},
      </if>
      <if test="record.selfEnroll != null">
        self_enroll = #{record.selfEnroll,jdbcType=VARCHAR},
      </if>
      <if test="record.auditStatus != null">
        audit_status = #{record.auditStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.editTime != null">
        edit_time = #{record.editTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update biz_course_enroll
    set ID = #{record.id,jdbcType=VARCHAR},
      course_open_id = #{record.courseOpenId,jdbcType=VARCHAR},
      student_id = #{record.studentId,jdbcType=VARCHAR},
      student_name = #{record.studentName,jdbcType=VARCHAR},
      self_enroll = #{record.selfEnroll,jdbcType=VARCHAR},
      audit_status = #{record.auditStatus,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      edit_time = #{record.editTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xrj.bean.BizCourseEnroll">
    update biz_course_enroll
    <set>
      <if test="courseOpenId != null">
        course_open_id = #{courseOpenId,jdbcType=VARCHAR},
      </if>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=VARCHAR},
      </if>
      <if test="studentName != null">
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="selfEnroll != null">
        self_enroll = #{selfEnroll,jdbcType=VARCHAR},
      </if>
      <if test="auditStatus != null">
        audit_status = #{auditStatus,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="editTime != null">
        edit_time = #{editTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xrj.bean.BizCourseEnroll">
    update biz_course_enroll
    set course_open_id = #{courseOpenId,jdbcType=VARCHAR},
      student_id = #{studentId,jdbcType=VARCHAR},
      student_name = #{studentName,jdbcType=VARCHAR},
      self_enroll = #{selfEnroll,jdbcType=VARCHAR},
      audit_status = #{auditStatus,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      edit_time = #{editTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <select id="mylist" parameterType="map" resultType="java.util.HashMap">
    select t1.id, t1.course_open_id as courseOpenId, t3.name as electiveCourseName, t2.give_teacher_name as giveTeacherName , attend_time as attendTime, 
    t1.student_name as studentName , t1.create_time as createTime, t1.audit_status as auditStatus
    from biz_course_enroll t1 
	join  biz_course_open t2 on t1.course_open_id = t2.id and t1.audit_status != 'CANCEL' and t2.audit_status != 'CANCEL' and t2.term_id = #{termId,jdbcType=VARCHAR}
	join biz_elective_course t3  on t2.elective_course_id = t3.id
	where t1.student_id =  #{studentId,jdbcType=VARCHAR}
  </select>
  <select id="autoAuditList" parameterType="map" resultType="java.util.HashMap">
    select t1.id, t1.limit_num as limitNum , count(*) as enrollNum  from biz_course_open t1 join biz_course_enroll t2 on t1.id = t2.course_open_id 
    and t2.audit_status='APPLY' where t1.term_id=#{termId,jdbcType=VARCHAR} and t1.audit_status ='PASS' and t1.enroll_auto_audit = 'NO' group by t1.id
  </select>
</mapper>